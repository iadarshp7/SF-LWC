Asynchronous Apex::::::>
1. annotate your method with @future
2. Batch class
public class OppProcessor implements Database.Batchable<sObject>, Database.stateful{
   public static recordCount = 0;
   public Database.QueryLocator start(Database.BatchableContext batchContext){
      return Database.getQueryLocator([SELECT Id, Name FROM Opportunity]);
   }
   public void execute(Database.BatchableContext batchContext, List<opportunity> OppList){
      for(Opportunity op:OppList){
        op.LeadSource='Web';
      }
      update OppList;
      recordCount+=OppList.size();
   }
   public void finish(Database.BatchableContext batchContext){
     System.debug('Batch class executed with '+recordCount+' records');
   }
}

<how to Invoke a batch class>

OppProcessor batchClass = new OppProcessor();
Id batchId = Database.executeBatch(batchClass);

3. Queueable 
public class MyQueueableClass implements Queueable{
    public void execute(QueueableContext queueContext){}
}

<how to Invoke a queueable class>
MyQueueableClass i=new MyQueueableClass(accList, accId);
Id queueId = System.enqueueJob(i);

<chain of Queueable apex classes>
public class FirstJob implements Queueable{
      public void execute(QueueableContext context){
          System.enqueueJob(new SecondJob());
      }
}

4. Schedulable

public class MySchedulable implements Schedulable{
      public void execute(SchedulableContext context){
      }
}


<To Invoke>

MySchedulable reminder = new MySchedulable();
//sec min hours DayOfMonth Month DayOfWeek Year
String sch = '0 0 0 23 8 ? 2026';
String jobId = System.schedule('Remind the Owner ',sch, reminder);